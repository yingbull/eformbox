<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<!--V20j Sept 7, 2020 -->
<title>Rich Text Letter</title>
<style type="text/css">
 body { font-family: Arial; }
.butn {width: 140px;}
</style>
<style>
.doc {
	color:blue;
	font-size:10px;
}
.lab {
	color:#CC0099;
	font-size:10px;
}
.hrm {
	color:red;
	font-size:10px;
}
.eform {
	color: green;
	font-size:10px;
}
</style>
<style type="text/css" media="print">
.DoNotPrint {display: none;}

</style>
<script language="javascript" type="text/javascript" src="${oscar_javascript_path}jquery/jquery-1.4.2.js"></script>

<script language="javascript">
var ImgArray = [];
var needToConfirm = false;

//keypress events trigger dirty flag for the iFrame and the subject line
document.onkeyup=setDirtyFlag


function setDirtyFlag() {
	needToConfirm = true; 
}

function releaseDirtyFlag() {
	needToConfirm = false; //Call this function if dosent requires an alert.
	//this could be called when save button is clicked
}


window.onbeforeunload = confirmExit;

function confirmExit() {
	if (needToConfirm){
	return "You have attempted to leave this page. If you have made any changes without clicking the Submit button, your changes will be lost. Are you sure you want to exit this page?";
	}
}


var loads=true;

function maximize() {
	window.resizeTo(1030, 930) ;
	loads=false;
}

function saveRTL() {
	needToConfirm=false;
	var theRTL=editControlContents('edit');
	var myNewString = theRTL.replace(/"/g, '&quot;');
	myNewString = theRTL.replace(/</g, '&lt;');
	myNewString = theRTL.replace(/>/g, '&gt;');
	document.getElementById('Letter').value=myNewString.replace(/'/g, "&#39;");
//  alternate approach to escape dangerous characters albeit less human readable, and needs to be unencoded
//	document.getElementById('Letter').value=encodeURIComponent(theRTL);	
}
</script>



//<script language="javascript" type="text/javascript" src="${oscar_javascript_path}eforms/editControl.js"></script>
<script language="javascript" type="text/javascript" src="${oscar_javascript_path}eforms/APCache.js"></script>
<script language="javascript" type="text/javascript" src="${oscar_javascript_path}eforms/imageControl.js"></script>
<script language="javascript" type="text/javascript" src="${oscar_javascript_path}eforms/faxControl.js"></script>
<script language="javascript" type="text/javascript" src="${oscar_javascript_path}eforms/signatureControl.jsp"></script>
<script language="javascript" type="text/javascript" src="${oscar_javascript_path}eforms/printControl.js"></script>

<script src='../eform/displayImage.do?imagefile=editControl.js'></script>
<script src='../eform/displayImage.do?imagefile=stamps.js'></script>
<script src='../eform/displayImage.do?imagefile=stamps.js'></script>
<script src='../eform/displayImage.do?imagefile=lab_grid2.js'></script>

<script language="javascript">

<!-- CODE FOR PULLING MEASUREMENTS  -->
	function labgrid(){
	//---------Paste lab grid-----------------------------------------------------------
	doHtml("<font size='3'><b>Lab testing summary:</font></b><p></p")  //header
	var LabName = ["HB", "EGFR", "SCR", "A1C", "FBS", "BG", "GT2", "APOB", "TCHL", "LDLC", "LDL", "HDL", "TCHD", "TG", "ACR", "NA", "Kpl", "CA", "PH", "MG", "TSH", "PSA", "PTH", "AST", "ALT", "CRP", "FOBT", "FITQ", "FIT", "HPSE", "HPSG", "HPBT", "HPYL", "INR", "URIC"]
	for (i = 0; i < LabName.length; i++) {
	   getMeasures(LabName[i])
	}
	}

	function labgrid2(){
	//---------Paste Vitals grid-----------------------------------------------------------
	doHtml("<font size='3'><b>Vitals summary:</font></b><p></p")  //header
	var LabName = ["BP","WT","HT","BMI"]
	for (i = 0; i < LabName.length; i++) {
	   getMeasures(LabName[i])
	}
	}

</script>

<!-- START OF EDITCONTROL CODE --> 
<script language="javascript">
	//put any of the optional configuration variables that you want here
	cfg_width = '840'; //editor control width in pixels
	cfg_height = '520'; //editor control height in pixels
	cfg_editorname = 'edit'; //the handle for the editor                  
	cfg_isrc = '../eform/displayImage.do?imagefile='; //location of the button icon files
	cfg_filesrc = '../eform/displayImage.do?imagefile='; //location of the html files
	cfg_template = 'blank.rtl'; //default style and content template
	cfg_formattemplate = '<option value=""> loading... </option></select>';
	//cfg_layout = '[all]';             //adjust the format of the buttons here
	//cfg_layout = '<table style="background-color:ccccff; width:840px"><tr id=control1><td>[bold][italic][underlined][strike][subscript][superscript]|[left][center][full][right]|[unordered][ordered][rule]|[undo][redo]|[indent][outdent][select-all][clean]|[table]</td></tr><tr id=control2><td>[select-block][select-face][select-size][select-template]|[image][clock][date][spell][help]</td></tr></table>[edit-area]';
	cfg_layout = '<table style="background-color:ccccff; width:840px"><tr id=control1><td align=center>[bold][italic][underlined][strike][subscript][superscript]|[left][center][full][right]|[unordered][ordered][rule]|[undo][redo]|[indent][outdent][select-all][clean]|[table]\[text-colour][hilight]</td></tr><tr id=control2><td align=center>[select-block][select-face][select-size][select-template]|[image][link]|[clock][date][spell][cut][copy][paste][help]</td></tr></table>[edit-area]';
	insertEditControl(); // Initialise the edit control and sets it at this point in the webpage

	function popup(location) {
	    DocPopup = window.open(location,"_blank","height=380,width=580");

	    if (DocPopup != null) {
	        if (DocPopup.opener == null) {
	            DocPopup.opener = self;
	        }
	    }
	}
	
	function gup(name, url)
	{
		if (url == null) { url = window.location.href; }
		name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
		var regexS = "[\\?&]"+name+"=([^&#]*)";
		var regex = new RegExp(regexS);
		var results = regex.exec(url);
		if (results == null) { return ""; }
		else { return results[1]; }
	}
	var demographicNo ="";

	jQuery(document).ready(function(){
		demographicNo = gup("demographic_no");
		if (demographicNo == "") { demographicNo = gup("efmdemographic_no", jQuery("form").attr('action')); }
		if (typeof signatureControl != "undefined") {
			signatureControl.initialize({
				sigHTML:"../signature_pad/tabletSignature.jsp?inWindow=true&saveToDB=true&demographicNo=",
				demographicNo:demographicNo,
				refreshImage: function (e) {
					var html = "<img src='"+e.storedImageUrl+"&r="+ Math.floor(Math.random()*1001) +"'></img>";
					doHtml(html);		
				},
				signatureInput: "#signatureInput"	
			});
		}		
	});
		
	var cache = createCache({
		defaultCacheResponseHandler: function(type) {
			if (checkKeyResponse(type)) {
				doHtml(cache.get(type));
			}			
			
		},
		cacheResponseErrorHandler: function(xhr, error) {
			alert("Please contact an administrator, an error has occurred.");			
			
		}
	});	
	
	function checkKeyResponse(response) {		
		if (cache.isEmpty(response)) {
			alert("The requested value has no content.");
			return false;
		}
		return true;
	}
	
	function printKey (key) {
		var value = cache.lookup(key); 
		if (value != null && checkKeyResponse(key)) { doHtml(cache.get(key)); } 		  
	}
	
	function submitFaxButton() {
		document.getElementById('faxEForm').value=true;
		saveRTL();
		setTimeout('document.RichTextLetter.submit()',1000);
	}
	

	cache.addMapping({name: "template", cacheResponseHandler: populateTemplate});

// add RTL specific key values 
// each cache name is an array of key values
// no need to add for standard apconfig.xml tags		
	

// format text for instant access	

	cache.addMapping({
		name: "letterhead", 
		values: ["clinic_name", "clinic_fax", "clinic_phone", "clinic_addressLineFull", "doctor", "doctor_contact_phone", "doctor_contact_fax", "doctor_contact_addr","current_user"], 
		storeInCacheHandler: function (key, value) {
			var text = genericLetterhead();
			cache.put("letterhead", text);
		},
		cacheResponseHandler: function () {
			if (checkKeyResponse(this.name)) {
				doHtml(cache.get(this.name));
			}
		}
	});

	cache.addMapping({
		name: "_ReferringBlock", 
		values: ["referral_name", "referral_address", "referral_phone", "referral_fax"], 	
		storeInCacheHandler: function (key, value) {
			var text = 
				(!cache.isEmpty("referral_name") ? cache.get("referral_name") + "<br>" : "") 
			  + (!cache.isEmpty("referral_address") ? cache.get("referral_address") + "<br>" : "")
			  + (!cache.isEmpty("referral_phone") ? "Tel: " + cache.get("referral_phone") + "<br>" : "")
			  + (!cache.isEmpty("referral_fax") ? "Fax: " + cache.get("referral_fax") + "<br>" : "");
			if (text == "") {
				text = 
					(!cache.isEmpty("bc_referral_name") ? cache.get("bc_referral_name") + "<br>" : "") 
				  + (!cache.isEmpty("bc_referral_address") ? cache.get("bc_referral_address") + "<br>" : "")
				  + (!cache.isEmpty("bc_referral_phone") ? "Tel: " + cache.get("bc_referral_phone") + "<br>" : "")
				  + (!cache.isEmpty("bc_referral_fax") ? "Fax: " + cache.get("bc_referral_fax") + "<br>" : "");
			}						 
			cache.put(this.name, text)
		},
		cacheResponseHandler: function () {
			if (checkKeyResponse(this.name)) {
				doHtml(cache.get(this.name));
			}
		}
	});

// fudge for older apconfig.xml	that lack referal_first_name, patient_nameF etc
	cache.addMapping({
		name: "referral_nameF", 
		values: ["referral_name"], 
		storeInCacheHandler: function(_key,_val) { 
		if (!cache.isEmpty("referral_name")) {
				var mySplitResult =  cache.get("referral_name").toString().split(",");
				cache.put("referral_nameF", mySplitResult[1]);
			} 
		}
	});
	cache.addMapping({
		name: "referral_nameL", 
		values: ["referral_name"], 
		storeInCacheHandler: function(_key,_val) { 
		if (!cache.isEmpty("referral_name")) {
				var mySplitResult =  cache.get("referral_name").toString().split(",");
				cache.put("referral_nameL", mySplitResult[0]);
			} 
		}
	});
	cache.addMapping({
		name: "PatientNameF", 
		values: ["first_last_name"], 
		storeInCacheHandler: function(_key,_val) { 
		if (!cache.isEmpty("first_last_name")) {
				var mySplitResult =  cache.get("first_last_name").toString().split(",");
				cache.put("PatientNameF", mySplitResult[0]);
			} 
		}
		
	});
	cache.addMapping({
		name: "_age", 
		values: ["age","ageComplex"], 
		storeInCacheHandler: function(_key,_val) { 
		if (!cache.isEmpty("ageComplex")) {
				cache.put("_age", cache.get("ageComplex"));
			} else {
				cache.put("_age", cache.get("age")+" year old");
			}
		}
	});
// end fudge

	cache.addMapping({
		name: "_ReferringBlockLite", 
		values: ["referral_name", "referral_address"], 
		storeInCacheHandler: function(key,value) { 
			var text = 
				(!cache.isEmpty("referral_name") ? cache.get("referral_name") + "<br>" : "") 
			  + (!cache.isEmpty("referral_address") ? cache.get("referral_address") + "<br>" : "")						 
			cache.put(this.name, text)
		},
		cacheResponseHandler: function () {
			if (checkKeyResponse(this.name)) {
				doHtml(cache.get(this.name));
			}
		}
	});

	cache.addMapping({
		name: "_SocialFamilyHistory",
		values: ["social_family_history"],
		storeInCacheHandler: function(key,value) {
			var text = cache.get("social_family_history").replace(/(<br>)+/g,"<br>");
			cache.put(this.name, text );
		},
		cacheResponseHandler:function () {
			if (checkKeyResponse(this.name)) {				
				doHtml(cache.get(this.name));
			}	
		}
	});
	
	cache.addMapping({
		name: "medical_historyS", 
		values: ["medical_history"], 
		storeInCacheHandler: function(_key,_val) { 
		if (!cache.isEmpty("medical_history")) {
				var mySplitResult =  cache.get("medical_history").toString().split("]]-----");
				cache.put("medical_historyS", mySplitResult.pop());
			} 
		}
	});

	cache.addMapping({
		name: "_ClosingSalutation", 
		values: ["provider_name_first_init", "current_user_fname_lname", "doctor", "current_user"],	
		storeInCacheHandler: function (key,value) {		
			var imgsrc=pickStamp();
			var frag = ("<p>Yours Sincerely<p>" + imgsrc + "<p>");
			var salutation = frag;
			if (!cache.isEmpty("provider_name_first_init")) {
					salutation=(frag+cache.get("provider_name_first_init") + ", MD");
				}
			// now allow for signing by the current user 
			if (cache.contains("current_user_fname_lname")) {
				for (i=0; i<ImgArray.length;i++){
					var ListItemArr =  ImgArray[i].split("|");
					var UserName = ListItemArr[0];
					var FileName = ListItemArr[1];
					if (cache.get('current_user_fname_lname').indexOf(UserName)>=0){
						console.log('current user has a signature so use it in the closing salutation');					
							salutation=(frag+cache.get("current_user_fname_lname") + ", MD");
						}
					}
			}
			cache.put(this.name, salutation);
		},
		cacheResponseHandler:function () {
			if (checkKeyResponse(this.name)) {				
				doHtml(cache.get(this.name));
			}	
		}
	});
	

	cache.addMapping({
		name: "stamp", 
		values: ["stamp_name", "doctor", "current_user"], 
		storeInCacheHandler: function(_key,_val) { 
				var imgsrc=pickStamp();
				cache.put("stamp",imgsrc);
		}
	});

	// code that loads hidden text to cache	
	
	$('input:hidden').each(function() {
		var value = $(this).val();
		cache.put(this.name, value);
	});


	
	// Setting up many to one mapping for derived gender keys.
	var genderKeys = ["he_she", "his_her", "gender"];	
	var genderIndex;
	for (genderIndex in genderKeys) {
		cache.addMapping({ name: genderKeys[genderIndex], values: ["sex"]});
	}
	cache.addMapping({name: "sex", values: ["sex"], storeInCacheHandler: populateGenderInfo});
	
	function isGenderLookup(key) {
		var y;
		for (y in genderKeys) { if (genderKeys[y] == key) { return true; } }
		return false;
	}

// Valid gender codes include F M O T U and empty	
	function populateGenderInfo(key, val){
		switch (val){
			case 'F':
				cache.put("sex", "F");
				cache.put("he_she", "she");
				cache.put("his_her", "her");
				cache.put("gender", "female");
				break;
			case 'M':
				cache.put("sex", "M");
				cache.put("he_she", "he");
				cache.put("his_her", "his");
				cache.put("gender", "male");
				break;
			case 'O':
				break;
				cache.put("sex", "O");
				cache.put("he_she", "they");
				cache.put("his_her", "their");
				cache.put("gender", "genderqueer");
				break;
			case 'T':
				cache.put("sex", "T");
				cache.put("he_she", "they");
				cache.put("his_her", "their");
				cache.put("gender", "trans gender");
				break;			
			default:
				cache.put("sex", "X");
				cache.put("he_she", "they");
				cache.put("his_her", "their");
				cache.put("gender", "unspecified gender");
		}
	}
	
	function Start() {
		
			$.ajax({
				url : "efmformrtl_templates.jsp",
				success : function(data) {
					$("#template").html(data);
					loadDefaultTemplate();
				}
			});
			
			$.ajax({
				url : "../eform/attachEform.jsp",
				error: function()
				{
					//file not exists
					console.log("this version of OSCAR does not support attachments to the RTL");
					document.getElementById("AttachFile").disabled = true;
					document.getElementById("trAttachedDocs").style.display = "none";
					document.getElementById("tdAttachedLabel").style.display = "none";				
				}
			});
			
			$.ajax({
			  url: "../oscarEncounter/oscarConsultationRequest/searchProfessionalSpecialist.json?keyword=zzzz",
			  error: function()
				{
					console.log("this version of OSCAR does not support eform based address searches");
					document.getElementById("AddSelected").disabled = true;
					document.getElementById("referral_name").style.display = "none";					
				}
			});

			
			$(".cacheInit").each(function() { 
				cache.put($(this).attr('name'), $(this).val());
				$(this).remove();				
			});
			
			// set eventlistener for the iframe to flag changes in the text displayed 
			var agent = navigator.userAgent.toLowerCase(); //for non IE browsers
			if ((agent.indexOf("msie") == -1) || (agent.indexOf("opera") != -1)) {
				document.getElementById(cfg_editorname).contentWindow
						.addEventListener('keypress', setDirtyFlag, true);
			}
				
			// set the HTML contents of this edit control from the value saved in OSCAR (if any)
			var contents = document.getElementById('Letter').value
			if (contents.length == 0) {
				parseTemplate();
			} else {
				seteditControlContents(cfg_editorname, contents);
//				seteditControlContents(cfg_editorname, decodeURIComponent(contents));
				document.getElementById(cfg_editorname).contentWindow.document.designMode = 'on';
			}
			maximize();
			
			console.log('updating attached');
			updateAttached();
	}



	function htmlLine(text) {
		return text.replace(/\r?\n/g,"<br>");
	}

	function genericLetterhead() {
		// set the HTML contents of the letterhead
		var address = '<table border=0><tbody><tr><td><font size=6>'
				+ cache.get('clinic_name')
				+ '</font></td></tr><tr><td><font size=2>'
				+ cache.get('doctor_contact_addr')
				+ ' Fax: ' + cache.get('doctor_contact_fax')
				+ ' Phone: ' + cache.get('doctor_contact_phone')
				+ '</font><hr></td></tr></tbody></table><br>';
		if ( (cache.get('clinic_name').toLowerCase()).indexOf('amily health team',0)>-1){
		address=fhtLetterhead(); }
		if ( (cache.get('clinic_name').toLowerCase()).indexOf('fht',0)>-1){
		address=fhtLetterhead(); }
		return address;
	}


	function fhtLetterhead() {
		// set the HTML contents of the letterhead using FHT colours
		var address = cache.get('clinic_addressLineFull')
				+ '<br>Fax:' + cache.get('clinic_fax')
				+ ' Phone:' + cache.get('clinic_phone');
		// use the doctors name to allow for a secretary to write a letter under direction
		if (cache.contains("doctor")) {
			var str = cache.get('doctor');
			var res = str.split(", "); //last, first
			console.log("doctor="+res[0]);
		}
		// use the current user instead if they have a signature on file 
		if (cache.contains("current_user")) {
			var str = cache.get('current_user');
			console.log(str);
			for (i=0; i<ImgArray.length;i++){
		        var ListItemArr =  ImgArray[i].split("|");
		        var UserName = ListItemArr[0];
		        var FileName = ListItemArr[1];
		        if (str.indexOf(UserName)>=0){
					console.log('current user '+str+' has a signature so use their name');					
		            var str = cache.get('current_user');
					var res = str.split(", "); //last, first
			        }
				}
		}

		address = '<table style=\'text-align: right;\' border=\'0\'><tbody><tr class=\'t71\' style=\'font-style: italic;\'><td><font size=\'+2\'>'
				+ cache.get('clinic_name')
				+ '</font> <hr class=\'b212\'></td> </tr> <tr class=\'t71\'> <td><font size=\'+1\'>'
				+  res[1] + " " + res[0] + '</font></td> </tr> <tr class=\'b212\'> <td><small>'
				+ address + '</small></td> </tr> </tbody> </table>';
		return address;
	}

 
	function pickStamp() {
		// set the HTML contents of the signature stamp
		// for single user set stamp.png to be that users signature image in the images folder
		// otherwise form a stamp.js file and upload to images with content as below 
		// defining key value pairs of name of doctor and the corresponding image file
		// var ImgArray = [
		//	"doctor|SignatureFile.png",
		//	];

		var mystamp ='<img src="../eform/displayImage.do?imagefile=stamp.png" width="200" height="100">';
		if (cache.contains("doctor")) {
			for (i=0; i<ImgArray.length;i++){
		        var ListItemArr =  ImgArray[i].split("|");
		        var UserName = ListItemArr[0];
		        var FileName = ListItemArr[1];
		        if (cache.get('doctor').indexOf(UserName)>=0){
		            mystamp = '<img src="../eform/displayImage.do?imagefile='+FileName+'" width="200" height="100" />';
			        }
				}
		}
		// now allow for signing by the current user 
		if (cache.contains("current_user")) {
			for (i=0; i<ImgArray.length;i++){
		        var ListItemArr =  ImgArray[i].split("|");
		        var UserName = ListItemArr[0];
		        var FileName = ListItemArr[1];
		        if (cache.get('current_user').indexOf(UserName)>=0){
					console.log('current user has a signature so use it');					
		            mystamp = '<img src="../eform/displayImage.do?imagefile='+FileName+'" width="200" height="100" />';
			        }
				}
		}
		return mystamp;
	}
	var formIsRTL = true;

	/*add eform attach*/
	function popupEformUpload() {
		var fid,demographic_no= "";
		fid = gup("fid");
		demographic_no= gup("demographic_no");
		//popup('../eform/attachEform.jsp?demo='+demographic_no+'&requestId='+fid); 
		popup('../eform/attachEform.jsp?demo='+demographic_no); 
		return false;
	}
	
	function updateAttached() {
	    var t = setTimeout('fetchAttached()', 2000);
	}
	
	function fetchAttached() {
	    var updateElem = 'tdAttachedDocs';
		var fid,demographic_no= "";
		fid = gup("fid");
		//fid='13';
		demographic_no= gup("demographic_no");
		var params = "demo="+demographic_no+"&requestId="+fid;
		var fdid = '${fdid}';
	//	alert(demographic_no);
		//alert(params);
		params = "requestId=" + fdid;
		var url = "../eform/displayAttachedFiles.jsp";
		
		$.ajax({
			url : url,
			data:params,
			type:'get',  
			success :function(request) {
				//alert(request.responseText);
				$("#tdAttachedDocs").html( request);
				// $(updateElem).innerHTML = request;
			},
			error:function(request) {
				$(updateElem).innerHTML = "<h3>Error: " + + request.status + "</h3>";
			}
		});
	}
	
</script>
<!-- END OF EDITCONTROL CODE -->
</head><body bgcolor="FFFFFF" onload="Start();">
<input type="hidden" name="WT" id="WT" oscarDB=m$WT#value>
<form method="post" action="" name="RichTextLetter" >

<textarea name="Letter" id="Letter" style="width:600px; display: none;"></textarea>

<div class="DoNotPrint" id="control3" style="position:absolute; top:5px; left: 860px;">

<!-- Letter Head -->
<input type="button" class="butn" name="AddLetterhead" id="AddLetterhead" value="Letterhead" onclick="printKey('letterhead');">
<br>

<!-- Adressee Select -->
<input type="text" name="referral_name" id="referral_name" onKeyup="consultantSearch(this.value)" placeholder=" lastname, firstname" autocomplete="off" onFocus="toggleTempBin(1, 'referral_name')" onBlur="toggleTempBin(0, 'referral_name')"  style="font-size:12px; ">

<div id="tempBin" onmouseover="tempBinHover(true)" onmouseout="tempBinHover(false)"style="display:none;position:absolute;padding:4px; background-color:white;border:thin solid #cccccc;z-index:999;font-size:12px;">You must enter at least 2 characters of a doctors name!</div>
<input type="hidden" name="consultantFilter" id="consultantFilter">
<textarea name="CopyTo" id="CopyTo" type="hidden" style="display:none;" ></textarea>
<br>

<input type="button" class="butn" name="AddSelected" id="AddSelected" value="Paste Selected" onclick="doHtml(getElementById('CopyTo').value.replace(/(\r\n|\n|\r)/gm,'<br>'));console.log(getElementById('CopyTo').value);">
<br>

<!-- Referring Block -->
<input type="button" class="butn" name="AddReferral" id="AddReferral" value="Referring Block" onclick="printKey('_ReferringBlock');">
<br>

<!-- Patient Block -->
<input type="button" class="butn" name="AddLabel" id="AddLabel" value="Patient Block" onclick="printKey('label');">
<br>

<!-- Social History -->
<input type="button" class="butn" name="AddSocialFamilyHistory" value="Social History" onclick="var hist='_SocialFamilyHistory';printKey(hist);">
<br>

<!--  Medical History -->
<input type="button"  class="butn" name="AddMedicalHistory" value="Medical History" width=30 onclick="var hist='medical_historyS';printKey(hist);">
<br>

<!--  Ongoing Concerns -->
<input type="button" class="butn" name="AddOngoingConcerns" value="Ongoing Concerns" onclick="var hist='ongoingconcerns'; printKey(hist);">
<br>

<!-- Reminders -->
<input type="button" class="butn" name="AddReminders" value="Reminders"
	onclick="var hist='reminders'; printKey(hist);">
<br>

<!-- Allergies -->
<input type="button" class="butn" name="Allergies" id="Allergies" value="Allergies" onclick="printKey('allergies_des');">
<br>

<!-- Prescriptions -->
<input type="button" class="butn" name="Medlist" id="Medlist" value="Prescriptions"	onclick="printKey('druglist');">
<br>

<!-- Other Medications -->
<input type="button" class="butn" name="OtherMedicationsHistory" value="Other Medications" onclick="printKey('other_medications_history'); ">
<br>

<!-- Risk Factors -->
<input type="button" class="butn" name="RiskFactors" value="Risk Factors" onclick="printKey('risk_factors_ext'); ">
<br>

<!-- Family History -->
<input type="button" class="butn" name="FamilyHistory" value="Family History" onclick="printKey('family_history'); ">
<br>

<!-- Patient Name --> 
<input type="button" class="butn" name="Patient" value="Patient Name" onclick="printKey('first_last_name');">
<br>

<!-- Patient Age -->
<input type="button" class="butn" name="PatientAge" value="Patient Age" onclick="var hist='_age'; printKey(hist);">
<br>

<!-- Patient Label -->
<input type="button" class="butn" name="label" value="Patient Label" onclick="hist='label';printKey(hist);">
<br>

<input type="button" class="butn" name="PatientSex" value="Patient Gender" onclick="printKey('gender');">
<br>

<!-- Closing Salutation -->
<input type="button" class="butn" name="Closing" value="Closing Salutation" onclick="printKey('_ClosingSalutation');">
<br>

<!-- Signature Stamp -->
<input type="button" class="butn" name="stamp" value="Stamp" onclick="printKey('stamp');">
<br>

<!--  Current User -->
<input type="button" class="butn" name="User" value="Current User" onclick="var hist='current_user'; printKey(hist);">
<br>

<!-- Attending Doctor -->
<input type="button" class="butn" name="Doctor" value="Doctor (MRP)" onclick="var hist='doctor'; printKey(hist);">
<br>

<!-- Vitals -->
<input type="button" class="butn" name="Vitals" value="Vitals" onclick="labgrid2()">
<br>

<!-- Common Labs -->
<input type="button" class="butn" name="LabGrid" value="Lab Grid" onclick="labgrid()">
<br>
<!-- Attach File -->
<input type="button" class="butn" name="AttachFile" id="AttachFile" value="Attach File" onclick="popupEformUpload()">

<table style="width:140px">
<tbody><tr>
<td style="text-align: center" id="tdAttachedLabel" >
Attached Files:</td>
</tr>
<tr>
	<td id="tdAttachedDocs" >
</td>
</tr>
<tr id="trAttachedDocs" >
	<td style="text-align: center">Legend<br>
	<span class="doc">Blue - Documents</span><br>
	<span class="lab">Purple - Labs</span><br>
	<span class="hrm">Red - Hrm</span><br>
	<span class="eform">Green - EForm</span>
	</td>
</tr>
</tbody></table>
</div>


</div>


<div class="DoNotPrint" >
<input onclick="viewsource(this.checked)" type="checkbox">
HTML Source
<input onclick="usecss(this.checked)" type="checkbox">
Use CSS	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Subject: <input name="subject" id="subject" size="40" type="text">		 

<table><tr id=sig>
<td> <div id="signatureInput">&nbsp;</div></td>

</tr></table>
<div id="faxControl">&nbsp;</div>
 
<input value="Submit" name="SubmitButton" type="submit" onclick="saveRTL();  document.RichTextLetter.submit()">
<input value="Print" name="PrintSaveButton" type="button" onclick="document.getElementById('edit').contentWindow.print();saveRTL();  setTimeout('document.RichTextLetter.submit()',1000);">
<input value="Reset" name="ResetButton" type="reset">
<input value="Print" name="PrintButton" type="button" onclick="document.getElementById('edit').contentWindow.print();">


    	</div>


</form>

<script type="text/javascript" >

//-- Autocomplete  script --
var searchDropDownFlag = false;
function consultantSearch(term){
if(term.length<2){
document.getElementById('tempBin').innerHTML = "You must enter at least 2 characters of a patients name!";
return false;
}

tmpBin = document.getElementById('tempBin');

loaderImg(tmpBin);

var request = new XMLHttpRequest();

request.open('GET', '../oscarEncounter/oscarConsultationRequest/searchProfessionalSpecialist.json?keyword='+term, true);
request.setRequestHeader("Content-Type", "application/json");
request.onload = function() {

  var data = this.response;
  var results_html = "";
  if (request.status >= 200 && request.status < 400) {

        // Request finished. Do processing here.
	var data = JSON.parse(this.response);
        var results_html = "";
	    if(data.length>0){
	      results_html += "<ul class=\"custom-dropdown\">";
		    for(i=0;i<=data.length-1;i++){
		      results_html += "<li onclick=\"populateInputField(this, 'consultant')\" data-id=\""+data[i].id+" \" data-address=\""+data[i].firstName+' '+data[i].lastName+'\r\n'+data[i].streetAddress+' \r\nFax: '+data[i].fax+"\">"+ data[i].lastName + ", " + data[i].firstName + "</li>";
		    }
	      results_html += "</ul>";
	    }else{
		results_html = "No results found matching <b>"+term+"</b>.";
	    }


//ensure the loader has time to display
setTimeout(() => {
	   document.getElementById('tempBin').innerHTML = results_html;
}, 500);


  } else {
    console.log('error')
  }

}// end onload

request.send();
}


function populateInputField(el, type){ 
  
document.getElementById("referral_name").value=el.firstChild.data;

if(type=="consultant")
document.getElementById("consultantFilter").value=el.getAttribute("data-id").trim();

//populate address: possible names = referral_address
document.getElementById("CopyTo").value=el.getAttribute("data-address").trim();


searchDropDownFlag = false;
toggleTempBin(0, null);
}


function toggleTempBin(a, parentElement){
if(a===1){

position = getOffset( document.getElementById(parentElement) );

new_top = position.top + document.getElementById(parentElement).offsetHeight
new_left = position.left-10;

document.getElementById("tempBin").style.top="58px";
document.getElementById("tempBin").style.left="-2px";
document.getElementById("tempBin").style.width=document.getElementById(parentElement).offsetWidth+"px";
document.getElementById("tempBin").style.display='block';


}else if(a===0 && searchDropDownFlag===false){
document.getElementById("tempBin").style.display='none';
document.getElementById("tempBin").innerHTML="You must enter at least 2 characters of a patients name!";
}
}

function getOffset( el ) {
    var _x = 0;
    var _y = 0;
    while( el && !isNaN( el.offsetLeft ) && !isNaN( el.offsetTop ) ) {
        _x += el.offsetLeft - el.scrollLeft;
        _y += el.offsetTop - el.scrollTop;
        el = el.offsetParent;
    }
    return { top: _y, left: _x};
}


function loaderImg(bin){
    bin.innerHTML="";
    var img = document.createElement('img');      
    img.src = '../images/loader.gif';
    img.style.marginLeft = "40%";
    bin.appendChild(img);
}


function tempBinHover(h){

if(h){
searchDropDownFlag = true;
}else{
searchDropDownFlag = false;
}
}


</script>
</body></html>